import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

let prod = false;


// Check CLI arguments
if (process.argv.length > 3) {
	console.error('Usage: node esbuild.config.mjs ["prod"|"dev"]');
	// console.error('Usage: %s %s ["prod"|"dev"]', process.argv[0], process.argv[1]);
	process.exit(1);
}

let buildenv = process.argv[2] ?? 'dev';
if (buildenv == 'production' || buildenv == 'prod') {
	prod = true;
} else if (buildenv != 'develop' && buildenv != 'dev') {
	console.error('Invalid build environment: %s', buildenv);
	process.exit(1);
}


const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["src/main.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins],
	format: "cjs",
	target: "es2018",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outfile: "main.js",
	minify: prod,
	loader: {
		'.yml': 'text',
		'.md': 'text',
	},
	alias: {
		// A somewhat hacky way altering behavior based on whether it is a production or dev build
		'src/debug': prod ? 'src/debug-prod' : 'src/debug',
	},
});

if (prod) {
	await context.rebuild();
	process.exit(0);
} else {
	await context.watch();
}
